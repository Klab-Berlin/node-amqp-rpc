{"name":"Node-amqp-rpc","tagline":"AMQP RPC driver for node. Tested on RabbitMQ.","body":"\r\n#AMQP-RPC\r\n\r\nRPC library based on AMQP protocol.\r\nTested with RabbitMQ on the highload project.\r\n\r\n\r\n###Install RabitMQ\r\n\r\n    apt-get install rabbitmq-server\r\n\r\n###Install library\r\n\r\n    npm install amqp-rpc\r\n\r\n##round-robin\r\n\r\nExample: Call remote function.\r\nRun multiple servers.js for round-robin shared.\r\n\r\n\r\n###server.js example\r\n\r\n    var rpc = require('amqp-rpc').factory({\r\n        url: \"amqp://guest:guest@localhost:5672\"\r\n    });\r\n\r\n\r\n    rpc.on('inc', function(param, cb){\r\n        var prevVal = param;\r\n        var nextVal = param+2;\r\n        cb(++param, prevVal, nextVal);\r\n    });\r\n\r\n    rpc.on('say.*', function(param, cb, inf){\r\n\r\n        var arr = inf.cmd.split('.');\r\n\r\n        var name = (param && param.name) ? param.name : 'world';\r\n\r\n        cb(arr[1] + ' ' + name + '!');\r\n\r\n    });\r\n\r\n    rpc.on('withoutCB', function(param, cb, inf) {\r\n\r\n      if(cb){\r\n        cb('please run function without cb parameter')\r\n      }\r\n      else{\r\n        console.log('this is function withoutCB');\r\n      }\r\n\r\n    });\r\n\r\n\r\n\r\n###client.js example\r\n\r\n    var rpc = require('amqp-rpc').factory({\r\n        url: \"amqp://guest:guest@localhost:5672\"\r\n    });\r\n\r\n    rpc.call('inc', 5, function() {\r\n        console.log('results of inc:', arguments);  //output: [6,4,7]\r\n    });\r\n\r\n    rpc.call('say.Hello', { name: 'John' }, function(msg) {\r\n        console.log('results of say.Hello:', msg);  //output: Hello John!\r\n    });\r\n\r\n    rpc.call('withoutCB', {}, function(msg) {\r\n        console.log('withoutCB results:', msg);  //output: please run function without cb parameter\r\n    });\r\n\r\n    rpc.call('withoutCB', {}); //output message on server side console\r\n\r\n\r\n##broadcast\r\n\r\nExample: Core receiving data from all workers.\r\nRun multiple worker.js for broadcast witness.\r\nThe core.js must be launched after all worker.js instances.\r\n\r\n###example/broadcast/worker.js\r\n\r\n    var os = require('os');\r\n    var worker_name = os.hostname() + ':' + process.pid;\r\n    var counter = 0;\r\n\r\n    var rpc = require('../../index').factory({\r\n        url: \"amqp://guest:guest@localhost:5672\"\r\n    });\r\n\r\n    rpc.onBroadcast('getWorkerStat', function(params, cb)    {\r\n        if(params && params.type == 'fullStat') {\r\n            cb(null, {\r\n                pid: process.pid,\r\n                hostname: os.hostname(),\r\n                uptime: process.uptime(),\r\n                counter: counter++\r\n            });\r\n        }\r\n        else {\r\n            cb(null, { counter: counter++ })\r\n        }\r\n    });\r\n\r\n###example/broadcast/core.js\r\n\r\n    var rpc = require('../../index').factory({\r\n        url: \"amqp://guest:guest@localhost:5672\"\r\n    });\r\n\r\n    var all_stats = {};\r\n\r\n    //rpc.callBroadcast() is rpc.call() + waiting multiple responses\r\n    //If remote handler without response data, you can use rpc.call() for initiate broadcast calls.\r\n\r\n    rpc.callBroadcast(\r\n        'getWorkerStat',\r\n        { type: 'fullStat'},                    //request parameters\r\n        {                                       //call options\r\n            ttl: 1000,                          //wait response time  (1 seconds), after run onComplete\r\n            onResponse: function(err, stat)  {  //callback on each worker response\r\n                all_stats[ stat.hostname+':'+ stat.pid ] = stat;\r\n\r\n            },\r\n            onComplete: function()  {   //callback on ttl expired\r\n                console.log('----------------------- WORKER STATISTICS ----------------------------------------');\r\n                for(var worker in all_stats) {\r\n                    s = all_stats[worker];\r\n                    console.log(worker, '\\tuptime=', s.uptime.toFixed(2) + ' seconds', '\\tcounter=', s.counter);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\nResults for three workers:\r\n\r\n    ----------------------- WORKER STATISTICS ----------------------------------------\r\n    host1:2612 \tuptime= 2470.39 seconds \tcounter= 2\r\n    host2:1615 \tuptime= 3723.53 seconds \tcounter= 8\r\n    host2:2822 \tuptime= 2279.16 seconds \tcounter= 3\r\n\r\nEugene Demchenko aka Goldy skype demchenkoe email demchenkoev@gmail.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}